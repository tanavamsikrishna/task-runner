#!/usr/bin/env lua

local function load_tasks()
  local task_file_load_success, tasks = pcall(require, 'tasks')
  if not task_file_load_success then
    io.stderr:write('Error loading tasks file:\n' .. tasks .. '\n')
    os.exit(false)
  elseif type(tasks) ~= 'table' then
    io.stderr:write('Tasks file need to return a tasks table.\n')
    os.exit(false)
  end
  return tasks
end

local function execute_runnable(runnable, prog_args)
  if type(runnable) == 'string' then
    local colors = require('term.colors')
    io.stderr:write(colors.dim .. 'Running `' .. runnable .. colors.reset .. '`\n')
    require('task_runner.helpers').shell(runnable)
  elseif type(runnable) == 'function' then
    runnable(table.unpack(prog_args or {}))
  else
    return false
  end
  return true
end

---@param task_seq string[]
---@param tasks table<string, table|function|string>|string|function
---@param prog_args string[]
local function execute_task(task_seq, tasks, prog_args)
  local setup_function = nil
  if tasks._setup ~= nil then
    setup_function = tasks._setup
  end
  for _, task_name in ipairs(task_seq) do
    if type(tasks) == 'table' and tasks[task_name] ~= nil then
      if tasks._setup ~= nil then
        setup_function = tasks._setup
      end
      tasks = tasks[task_name]
    else
      return false, 'Task `' .. table.concat(task_seq, ' ') .. '` not found'
    end
  end

  if type(tasks) == 'table' then
    if tasks._setup ~= nil then
      setup_function = tasks._setup
    end
    if tasks._action ~= nil then
      tasks = tasks._action
    end
  end

  if setup_function then
    if not execute_runnable(setup_function) then
      return false, 'Setup for `' .. table.concat(task_seq, ' ') .. '` is not a runnable'
    end
  end
  if not execute_runnable(tasks, prog_args) then
    return false, 'Action for `' .. table.concat(task_seq, ' ') .. '` is not a runnable'
  end
  return true
end

local function build_help(task_tree, lines, parent_path)
  local colors = require('term.colors')
  local code_fg = colors.white
  local doc_fg = string.char(27) .. '[3m' .. colors.blue
  local parent_path_str = table.concat(parent_path, ' ')
  if type(task_tree) == 'function' then
    table.insert(lines, { parent_path_str, '' })
    return
  elseif type(task_tree) == 'string' then
    table.insert(lines, { parent_path_str, code_fg .. '$ ' .. task_tree .. colors.reset })
    return
  end
  for k, v in pairs(task_tree) do
    if k == '_desc' then
      table.insert(lines, { parent_path_str, doc_fg .. v .. colors.reset })
    elseif k == '_action' and type(v) == 'string' then
      table.insert(lines, { parent_path_str, code_fg .. '$ ' .. v .. colors.reset })
    elseif k ~= '_action' and k ~= '_setup' then
      table.insert(parent_path, k)
      build_help(v, lines, parent_path)
      table.remove(parent_path, #parent_path)
    end
  end
end

local function print_two_column_table(lines)
  table.sort(lines, function(e1, e2)
    return e1[1] < e2[1]
  end)
  local max_len = 0
  for _, line in ipairs(lines) do
    max_len = math.max(max_len, #line[1])
  end
  io.stdout:write('Tasks:\n\n')
  for _, line in ipairs(lines) do
    io.stdout:write(string.format('%-' .. max_len .. 's   %s\n', line[1], line[2] or ''))
  end
end

--@param cmd_line_args string[]
local function split_arguments(cmd_line_args)
  local task_seq = {}
  local prog_args = {}
  local current_arg_type = task_seq
  for _, v in ipairs(cmd_line_args) do
    if v == '--' then
      current_arg_type = prog_args
    else
      table.insert(current_arg_type, v)
    end
  end
  return task_seq, prog_args
end

local function print_completions_script()
  print([[
complete -c trn -a '(trn --completions (commandline | string split " "))' -f
        ]])
end

local function process_shell_completions(tasks)
  table.remove(arg, 1) -- remove '--completions'
  table.remove(arg, 1) -- remove the program name (e.g., 'trn')

  local current_tasks_node = tasks -- Start at the root of the tasks table
  local partial_word = ''

  -- If there are arguments left after removing --completions and program name,
  -- the last one is the word to be completed.
  -- All preceding arguments form the path to the current task level.
  if #arg > 0 then
    partial_word = arg[#arg]
    table.remove(arg, #arg) -- 'arg' now only contains the path segments
  end

  -- Navigate to the correct level in the tasks table based on the path segments
  for _, path_segment in ipairs(arg) do
    if type(current_tasks_node) == 'table' and current_tasks_node[path_segment] ~= nil then
      current_tasks_node = current_tasks_node[path_segment]
    else
      -- Invalid path segment, or navigated to a non-table item.
      -- No further completions possible from here.
      return
    end
  end

  -- We must be at a table node to list sub-tasks.
  if type(current_tasks_node) ~= 'table' then
    return
  end

  -- List tasks at the current_tasks_node that start with partial_word
  for task_name, task_value in pairs(current_tasks_node) do
    -- Ignore internal keys like _desc, _action, _setup (those starting with '_')
    if not string.match(task_name, '^_') then
      -- Match if partial_word is empty (list all) or if task_name starts with partial_word
      if #partial_word == 0 or string.sub(task_name, 1, #partial_word) == partial_word then
        io.stdout:write(task_name)
        local desc = nil
        if type(task_value) == 'table' and task_value._desc ~= nil then
          desc = task_value._desc
        elseif type(task_value) == 'string' then
          -- If the task_value is a string, it's the command itself.
          -- This can serve as a simple description.
          desc = task_value
        end
        -- Note: function tasks without a _desc in a table wrapper won't have a description printed here.
        if desc then
          io.stdout:write('\t' .. desc)
        end
        io.stdout:write('\n')
      end
    end
  end
end

local function main()
  if arg[1] == '--completions-script' then
    print_completions_script()
    return
  end

  local tasks = load_tasks()
  if #arg == 0 then
    local help_lines = {}
    build_help(tasks, help_lines, {})
    print_two_column_table(help_lines)
  elseif arg[1] == '--completions' then
    process_shell_completions(tasks)
  else
    local task_seq, prog_args = split_arguments(arg)
    local success, msg = execute_task(task_seq, tasks, prog_args)
    if not success then
      io.stderr:write(msg .. '\n')
    end
  end
end

main()
