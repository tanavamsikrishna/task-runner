#!/usr/bin/env lua

local task_file_load_success, tasks = pcall(require, "tasks")
if not task_file_load_success then
    io.stderr:write("No tasks file found found.\n" .. tasks .. "\n")
    os.exit(false)
elseif type(tasks) ~= "table" then
    io.stderr:write("Tasks file need to return a tasks table.\n")
    os.exit(false)
end

local argparse = require("argparse")

---@param cmd_base argparse.Parser|argparse.Command
---@return {task_path: string, task_desc: string}[]
local function build_argument_parser(tasks, cmd_base)
    for task_name, task_definition in pairs(tasks) do
        if task_name == "_desc" then
            goto continue
        end

        local desc = nil
        if type(task_definition) == "table" and task_definition["_desc"] ~= nil then
            desc = task_definition["_desc"]
        end

        local cmd = cmd_base:command(task_name, desc):add_help(false)
        if
            (type(task_definition) == "table" and type(task_definition["_action"]) == "function")
            or (type(task_definition) == "function")
        then
            local action = nil
            if type(task_definition) == "function" then
                action = task_definition
            else
                action = task_definition["_action"]
            end
            cmd:action(action)
        elseif type(task_definition) == "table" then
            build_argument_parser(task_definition, cmd)
        else
            print("Task `" .. task_name .. "` is not having a valid action: " .. task_definition)
            os.exit(false)
        end
        ::continue::
    end
end

local parser = argparse("Tasks"):add_help(false):require_command(false)
build_argument_parser(tasks, parser)

local function build_help(cmd, lines, path)
    if cmd._parent ~= nil then
        table.insert(path, cmd._name)
        local help_line = { table.concat(path, ".") }
        if cmd._description then
            table.insert(help_line, cmd._description)
        end
        table.insert(lines, help_line)
    end
    for _, child in ipairs(cmd._commands) do
        build_help(child, lines, path)
    end
    table.remove(path, #path)
end

local function print_help(lines)
    table.sort(lines, function(e1, e2)
        return e1[1] < e2[1]
    end)
    local max_len = 0
    for _, line in ipairs(lines) do
        max_len = math.max(max_len, #line[1])
    end
    print("Tasks:\n")
    for _, line in ipairs(lines) do
        print(
            string.format("%-" .. max_len .. "s   %s", line[1], line[2] or "")
        )
    end
end

local success, msg = parser:pparse()
if (not success) then
    io.stderr:write(msg)
elseif next(msg) == nil then
    local help_lines = {}
    build_help(parser, help_lines, {})
    print_help(help_lines)
end
